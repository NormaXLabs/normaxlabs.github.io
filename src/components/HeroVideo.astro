---
/**
 * HeroVideo component – autoplay video (muted), pulsante "AUDIO" per sbloccare,
 * full-screen slide verticale che compare dopo il video.
 * Include indicatori a puntini per le slide.
 * Props:
 *  - src: string (percorso video)
 *  - headline: string
 *  - items: Array<{ text: string; href?: string }>
 */
const { src, headline = '', items = [] } = Astro.props;
---

<style is:global>
  .hero-overlay::after {
    @apply absolute inset-0 bg-gradient-to-br from-black/40 to-black/0;
    content: '';
  }
  /* card animation */
  .bullet-init {
    opacity: 0;
    transform: translateY(16px);
    transition: opacity .6s ease, transform .6s ease;
  }
  .bullet-show {
    opacity: 1;
    transform: translateY(0);
  }
  /* indicator dots */
  .indicator {
    @apply w-3 h-3 rounded-full bg-white/50;
  }
  .indicator-active {
    @apply bg-white;
  }
</style>

<section class="relative h-[70vh] overflow-hidden flex items-center justify-center">
  <!-- Video Block -->
  <div id="videoBlock" class="absolute inset-0 flex items-center justify-center transition-opacity duration-700">
    <video
      id="introVideo"
      class="absolute inset-0 w-full h-full object-cover hero-overlay"
      src={src}
      autoplay
      muted
      playsinline
      webkit-playsinline
    ></video>
    <h1 class="relative z-10 text-white text-4xl md:text-6xl font-extrabold text-center px-4">
      {headline}
    </h1>
    <button
      type="button"
      id="unmuteBtn"
      class="absolute bottom-6 right-6 bg-white/80 backdrop-blur px-14 py-6 rounded-full text-primary-700 font-semibold shadow hover:bg-white transition"
    >
      ▶️ UNMUTE
    </button>
  </div>

  <!-- Slide List Full Screen -->
  <div
    id="bulletList"
    class="absolute inset-0 overflow-y-auto snap-y snap-mandatory opacity-0 pointer-events-none transition-opacity duration-700"
  >
    <ul class="h-full">
      {items.map(({ text, href }, i) => (
        <li
          class={`bullet-init snap-start h-full flex flex-col justify-center items-center p-10 text-white transition-transform
            ${
              i % 7 === 0 ? 'bg-[url("/img/process.png")] bg-cover'
            : i % 7 === 1 ? 'bg-[url("/img/cex.png")] bg-cover'
            : i % 7 === 2 ? 'bg-[url("/img/advisory.png")] bg-cover'
            : i % 7 === 3 ? 'bg-[url("/img/lim_ord_b.png")] bg-cover'
            : i % 7 === 4 ? 'bg-[url("/img/pumpfun.png")] bg-cover'
            : i % 7 === 5 ? 'bg-[url("/img/security.png")] bg-cover'
            : 'bg-gradient-to-br from-orange-500 to-pink-600'
            }
          `}
        >
          <span class="text-4xl md:text-5xl font-extrabold text-center">{text}</span>
          <a
            href={href ?? '#'}
            class="mt-8 inline-flex items-center gap-2 text-lg md:text-4xl"
          >
            <span class="underline">Vai</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M17 8l4 4m0 0l-4 4m4-4H3"
              />
            </svg>
          </a>
        </li>
      ))}
    </ul>
  </div>

  <!-- Dot Indicators -->
  <div
    id="indicators"
    class="absolute right-4 top-1/2 transform -translate-y-1/2 flex flex-col space-y-3 z-20"
  >
    {items.map((_, i) => (
      <div class="indicator cursor-pointer" data-index={i}></div>
    ))}
  </div>
</section>

<script is:inline client:load>
  document.addEventListener('DOMContentLoaded', () => {
    const video = document.getElementById('introVideo');
    const vBlock = document.getElementById('videoBlock');
    const list = document.getElementById('bulletList');
    const btn = document.getElementById('unmuteBtn');
    const indicators = document.querySelectorAll('#indicators .indicator');

    function showList() {
      if (list.classList.contains('pointer-events-none')) {
        vBlock.classList.add('opacity-0', 'pointer-events-none');
        list.classList.remove('opacity-0', 'pointer-events-none');
        list.querySelectorAll('.bullet-init').forEach((el, i) =>
          setTimeout(() => el.classList.add('bullet-show'), i * 700)
        );
        updateIndicators(0);
      }
    }

    const unmuteHandler = (e) => {
      e.preventDefault();
      video.pause();
      video.muted = false;
      video.removeAttribute('muted');
      video.play();
      btn.classList.add('opacity-0', 'pointer-events-none');
    };
    btn.addEventListener('click', unmuteHandler);
    btn.addEventListener('touchend', unmuteHandler, { passive: false });

    video.addEventListener('ended', showList);
    window.addEventListener('wheel', () => {
      video.pause();
      showList();
    }, { once: true, passive: true });
    window.addEventListener('touchmove', () => {
      video.pause();
      showList();
    }, { once: true, passive: true });

    function updateIndicators(activeIndex) {
      indicators.forEach((dot, i) => dot.classList.toggle('indicator-active', i === activeIndex));
    }
    list.addEventListener('scroll', () => {
      const index = Math.round(list.scrollTop / list.clientHeight);
      updateIndicators(index);
    }, { passive: true });

    indicators.forEach((dot, i) => {
      dot.addEventListener('click', () => {
        list.scrollTo({ top: i * list.clientHeight, behavior: 'smooth' });
        updateIndicators(i);
      });
    });
  });
</script>
