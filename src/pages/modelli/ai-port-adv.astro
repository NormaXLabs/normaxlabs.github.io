---
import Layout from '../../layouts/BaseLayout.astro';
const CALLS = import.meta.env.PUBLIC_OPENAI_API_KEY;
---


<Layout title="Investment Questionnaire">
  <meta id="opcalls" content={CALLS} />


    <div class="max-w-xl mx-auto space-y-10">

      <h1 class="text-3xl font-extrabold text-center">
        Profilo Investitore
      </h1>

      <!-- ======== FORM ======== -->
      <form id="qForm" class="space-y-6">

        <input name="Age" type="number" placeholder="Età" required class="input" />

        <input name="Investment Experience" placeholder="Tipologia di investitore: Inesperto, Moderato o Esperto" required class="input" />

        <input name="Risk Tolerance" placeholder="Tolleranza del Rischio: Bassa, Media o Alta" required class="input" />

        <input name="Investment Horizon" placeholder="Orizzonte (es. 10 anni)" required class="input" />

        <input name="Goals" placeholder="Obiettivi (es. Crescita)" required class="input" />

        <input name="Profession" placeholder="Professione" class="input" />
        <input name="Personal Interests" placeholder="Interessi personali" class="input" />

        <button class="btn-primary w-full">Genera Portfolio</button>
      </form>

      <!-- ======== RISULTATO / LOADER ======== -->
      <div id="loading" class="hidden flex flex-col items-center gap-3">
        <div class="h-8 w-8 border-4 border-indigo-300 rounded-full border-t-transparent animate-spin"></div>
        <p class="text-slate-600">Generazione Portfolio…</p>
      </div>

      <div id="result" class="hidden space-y-6">
        <h2 class="text-2xl font-bold text-center">Portfolio suggerito</h2>

        <!-- container cards -->
        <div id="cards"
            class="grid md:grid-cols-4 gap-6 text-left"></div>

        <!-- JSON raw toggle -->
        <details class="border rounded p-2">
          <summary class="cursor-pointer font-semibold">Mostra JSON raw</summary>
          <pre id="jsonRaw" data-json
              class="mt-3 bg-slate-100 p-4 rounded text-sm overflow-x-auto"></pre>
        </details>
      </div>
    </div>
  </section>

  <div class="h-64"></div>

  <!-- ========== CLIENT-SIDE JS ========== -->
  <script is:inline>

    const OPENAI_API_KEY = document
    .getElementById('opcalls')
    .getAttribute('content');

    /* costruisce il prompt */
    function buildMessages(p) {
      return [
        { role: "system", content:
          `Sei un portfolio manager senior specializzato in SMAs.

          Crea un portafoglio azionario diversificato (20–25 titoli) per il cliente.

          Regole:

          - Rispetta la tolleranza al rischio del cliente (${p["Risk Tolerance"] || "Medium"}) considerando azioni, ETF, indici, materie prime, derivati, valute e in maniera molto ridotta le crypto valute nel CEX.
          - Prendi solo asset che hanno dati in in Yahoo Finance https://it.finance.yahoo.com/, controlla per bene. 
          - Orizzonte temporale d’investimento: ${p["Investment Horizon"] || "N/A"}.
          - Considera asset finanziari contrapposti e decorrelati con la propria professione  ${p["Profession"] || "N/A"}.
          - Considera anche titoli che sono in linea con l’interesse ${p["Personal Interests"] || "N/A"} e siano performanti.
          - Ottimizza il rendimento atteso per unità di rischio.
          - Trova un portafoglio adatto a un’esperienza di investimento ${p["Investment Experience"] || "Moderate"}.
          - Punta alla diversificazione settoriale e a una bassa correlazione tra le posizioni.
          - L’investimento ha l’obiettivo: ${p["Goals"] || "Growth"} e il portfolio deve essere adatto a una persona di ${p["Age"] || "45"} anni.
          - OUTPUT SOLO IN FORMATO JSON: { "portfolio":[{name,ticker,weight_pct,rationale}] }
          - Assicurati che i pesi sommino a 100.
          - Scrivi tutto in italiano l'output` },
        { role: "user", content:
          "Client questionnaire:\n\n" + JSON.stringify(p, null, 2) }
      ];
    }

    async function generatePortfolio(profile) {
      const res = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${OPENAI_API_KEY}`
        },
        body: JSON.stringify({
          model: "gpt-4.1-mini",
          response_format: { type: "json_object" },
          messages: buildMessages(profile)
        })
      });

      if (!res.ok) throw new Error("AI error " + res.status);
      const data = await res.json();
      return JSON.parse(data.choices[0].message.content);
    }

    /* ---------- DOM refs ---------- */
  const form   = document.getElementById("qForm");
  const btn    = form.querySelector("button");
  const loader0 = document.getElementById("loading");
  const cardsC = document.getElementById("cards");
  const resBox = document.getElementById("result");
  const jsonRaw= document.getElementById("jsonRaw");

  /* ---------- helpers ---------- */
  function showLoader(state) {
    loader0.classList.toggle("hidden", !state);
    btn.disabled = state;
  }

  function renderCards(portfolioArr) {
    cardsC.innerHTML = "";            // reset
    portfolioArr.forEach(p => {
      const card = document.createElement("div");
      card.className =
        "rounded-xl p-5 shadow-lg border border-slate-200 bg-white";
      card.innerHTML = `
        <h3 class="text-xl font-bold mb-2">${p.ticker}</h3>
        <p class="text-sm text-slate-500 mb-1">${p.name}</p>
        <p class="text-lg font-semibold mb-2">${p.weight_pct}%</p>
        <p class="text-xs text-slate-600">${p.rationale}</p>`;
      cardsC.appendChild(card);
    });
  }

  /* ---------- form submit ---------- */
  form.onsubmit = async (e) => {
    e.preventDefault();
    const profile = Object.fromEntries(new FormData(form).entries());

    showLoader(true);
    resBox.classList.add("hidden");

    try {
      const portfolioObj = await generatePortfolio(profile);
      renderCards(portfolioObj.portfolio);
      jsonRaw.textContent = JSON.stringify(portfolioObj, null, 2);
      resBox.classList.remove("hidden");
    } catch (err) {
      console.error(err);
      alert(err.message);
    } finally {
      showLoader(false);
    }
  };
  </script>

  <style is:global>
    .input       { @apply w-full border p-2 rounded; }
    .btn-primary { @apply bg-indigo-600 text-white py-3 rounded
                   hover:bg-indigo-700 transition; }
  </style>

  <!---- #########################################################  ---->

  <section class="py-24 max-w-5xl mx-auto space-y-14">
    <h1 class="text-3xl font-bold text-center">Rendimento del portfolio in una finestra annuale</h1>
    <p class="mt-4 max-w-xl mx-auto text-xl/relaxed font-gray tracking-tight drop-shadow-lg">
      Incolla qui il tuo portfolio nello stesso formato precedente. 
    </p>

    <!-- ===== Form JSON ===== -->
    <form id="pfForm" class="space-y-6">
      <textarea id="jsonArea"
                class="w-full h-60 p-3 border rounded font-mono text-xs"
                spellcheck="false">Incolla qui il JSON raw</textarea>
      <p class="max-w-xl mx-auto text-s/relaxed font-gray tracking-tight drop-shadow-lg">
        (Attenzione: alcuni titoli potrebbero non essere presenti nella presa dati)
      </p>
      <button class="px-6 py-3 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition w-full">
        Elabora & Plot
      </button>
    </form>

    <!-- Loader -->
    <div id="loader" class="hidden flex items-center gap-3">
      <span class="h-6 w-6 border-4 border-indigo-300 border-t-transparent rounded-full animate-spin"></span>
      <p class="text-slate-600">Download prezzi…</p>
    </div>

    <!-- Canvas -->
    <canvas id="pfChart" class="w-full h-96"></canvas>
  </section>

  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- ===== Client-side ===== -->
  <script type="module" client:load>
    const $ = s => document.querySelector(s);

    const form   = $('#pfForm');
    const area   = $('#jsonArea');
    const loader = $('#loader');
    const canvas = $('#pfChart');
    let   chart;

    /* ------- helper ------- */
    const ln = Math.log;
    function pct2w(p){ return p/100; }

    async function fetchSeries(sym){
        const now=Math.floor(Date.now()/1000);
        const year=now-60*60*24*365;
        const url=`https://query2.finance.yahoo.com/v8/finance/chart/${sym}?period1=${year}&period2=${now}&interval=1d`;

        /* <-- la magia: proxy anti-CORS –> */
        const prox=`https://corsproxy.io/?${encodeURIComponent(url)}`;

        const r=await fetch(prox,{headers:{'User-Agent':'Mozilla/5.0'}});
        if(!r.ok)throw new Error(`${sym} Pesa dati NON risponde`);
        const j=await r.json();
        const res=j.chart?.result?.[0];
        if(!res)throw new Error('Ticker assente');
        return res.timestamp.map((t,i)=>({
        date : new Date(t*1000).toISOString().slice(0,10),
        close: res.indicators.quote[0].close[i]
        })).filter(d=>d.close!=null);
    }

    form.onsubmit = async e=>{
      e.preventDefault();
      loader.classList.remove('hidden');

      try{
        const obj = JSON.parse(area.value);
        const pos = obj.portfolio ?? [];
        if(pos.length===0) throw new Error('portfolio vuoto');

        const seriesMap = Object.fromEntries(
          await Promise.all(pos.map(async p=>{
            try{
                const rows = await fetchSeries(p.ticker);
                return [p.ticker, rows];
            } catch(e){
                console.error(e);
                return [p.ticker, null];
            }
          }))
        );

        /* trova il set minimo di date comuni */
        const commonDates = seriesMap[pos[0].ticker].map(r=>r.date)
          .filter(d => pos.every(p => seriesMap[p.ticker].some(r=>r.date===d)));

        /* calcola rendimenti log e cumulato */
        const cumLog = [];
        let acc = 0;
        for(let i=1;i<commonDates.length;i++){
          const d0 = commonDates[i-1];
          const d1 = commonDates[i];

          let daily = 0;
          pos.forEach(p=>{
            const arr = seriesMap[p.ticker];
            const c0  = arr.find(r=>r.date===d0).close;
            const c1  = arr.find(r=>r.date===d1).close;
            const ret = ln(c1/c0);
            daily += pct2w(p.weight_pct)*ret;
          });

          acc += daily;
          cumLog.push({date:d1, value:acc});
        }

        /* build chart */
        if(chart) chart.destroy();
        chart = new Chart(canvas,{
          type:'line',
          data:{
            labels: cumLog.map(r=>r.date),
            datasets:[{
              label:'Portfolio Return',
              data : cumLog.map(r=>r.value),
              borderColor:'#4f46e5',
              backgroundColor:'rgba(79,70,229,.15)',
              pointRadius:0,
              tension:.25,
              fill:true,
            }]
          },
          options: { plugins: { legend: { position: 'bottom' , labels: {font: {size: 26}}} },
          scales: {
            x: { title: { display: true, text: 'Giorni', font: {
            size: 26  } }, ticks: { font: {size: 18}, maxTicksLimit: 7} },
            y: {  title: { display: true, text: 'Cumulato Log-Return', font: { size: 26  } }, ticks: { font: {size: 18}, autoSkip: true, maxTicksLimit: 6} }
          },
          animation: { duration: 500 } }
        });

      }catch(err){
        console.error(err);
        alert(err.message);
      }finally{
        loader.classList.add('hidden');
      }
    };
  </script>








</Layout>
